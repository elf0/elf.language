version: 0

//License: Public Domain
//Author: elf
//EMail: elf@iamelf.com

import{
  elf.List
  elf.Thread
  elf.Thread.Condition
}

root: elf.WorkerThread

TaskEntry: (task: Task)->Bool
TaskFinalize: (task: Task)

Task{
  node: DoubleNode
  Entry: TaskEntry
  Finalize: TaskFinalize
}

$Task.Initialize(TaskEntry Entry, TaskFinalize Finalize){
  .Entry = Entry
  .Finalize = Finalize
}


WorkerThread:
  thread: Thread
  lock: ThreadLock
  condition: ThreadCondition
  runnings: List
  pendings: List

$Initialize
  .thread.Initialize((ThreadEntry)WorkerThread_Entry)
  .lock.Initialize()
  .condition.Initialize()
  .runnings.Initialize()
  .pendings.Initialize()

$Finalize
  .condition.Finalize()
  .lock.Finalize()

$Lock:
  .lock.$Lock

$Unlock:
  .lock.$Unlock

$Notify:
  .condition.Signal()

$Wait:
  .condition.Wait(.lock)

$Run->Bool
   return .thread.Run()

$Post: task
  Lock()
  .pendings.Push((DoubleNode)task)
  Unlock()

  Notify()

//Do not post Empty task list
$Post: runnings
  $Lock
  runnings.MoveTo(.pendings)
  $Unlock
  $Notify

$has Tasks(runnings: List)->Bool
  return runnings.NotEmpty()
}

$NoTasks: runnings -> Bool
  return runnings.Empty()

$Move: pendings, runnings
  pendings.MoveTo(pTasks)

$WaitTasks:
   runnings: .runnings
   pendings: .pendings

   $Lock

   if .pendings has Tasks,
     $Move .pendings to .runnings
   else if .runnings no Tasks,
     $Wait
     $Move .pendings to .runnings

   $Unlock

$RunTasks:
  entry: DoubleNode(.runnings)
  node: DoubleNode = entry.next
  task: Task
  while(node != entry){
   task = (Task)node
   if(task.Entry(task)){
    .runnings.Remove(pNode)
    node = node.next
    task.Finalize(task)
   }
   else
    node = node.next
  }

$Entry:->void *
  while(true){
  .WaitTasks()
  .RunTasks()
  }
  return null
