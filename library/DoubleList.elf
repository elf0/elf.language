version: 0
//License: Public Domain
//Author: elf
//EMail: elf198012@gmail.com

root: elf.DoubleList

import{
 elf.List
 elf.DoubleNode
}

List{
$Reset = {
  .entry.Reset()
}

$Initialize = {
  .Reset()
}

?is Empty = {
  return "Is .entry Alone?"
}

?is not Empty = {
  return .entry is not Alone
}

$get Front = DoubleNode{
 return entry.Next
}

$get Back = DoubleNode{
 return entry.Prev
}

$Insert = (node: = DoubleNode, where: = DoubleNode){
  node.Link(where.Prev, where)
}

$InsertAfter = (node: = DoubleNode, where: = DoubleNode){
  node.Link(where, where.Next)
}

$Remove = (node: = DoubleNode){
  node.Unlink()
}

//push back
$Push = (node: = DoubleNode){
  node.Link(entry.Prev, entry)
}

//pop front
$Pop = ->(node: DoubleNode){
  node = entry.Next
  node.Unlink()
}

$.PushFront = (node: = DoubleNode){
  node.Link(entry, entry.Next)
}

$.PopBack = ->(node: DoubleNode){
  node = entry.Prev
  node.Unlink()
}

$.MoveNodeToFront = (node: = DoubleNode){
  .Remove(node: DoubleNode)
  .PushFront(node: DoubleNode)
}

//move to back
$.MoveTo = (target: = This){
  .entry.MoveBuddiesTo(target.entry)
}

$.MoveToFront = (target: = This){
  .entry.MoveBuddiesToFront(target.entry)
}

$.Swap = (target: = This){
  .entry.SwapBuddies(target.entry)
}
private:
  entry: DoubleNode
}List
