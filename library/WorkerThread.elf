version: 0

//License: Public Domain
//Author: elf
//EMail: elf198012@gmail.com

import{
 elf.List
 elf.Thread
 elf.Thread.Condition
}

root: elf.WorkerThread

TaskEntry: (task: Task)->Bool;
TaskFinalize: (task: Task);

Task{
 node: DoubleNode;
 Entry: TaskEntry;
 Finalize: TaskFinalize;
}

Task.Initialize(TaskEntry Entry, TaskFinalize Finalize){
 .Entry = Entry;
 .Finalize = Finalize;
}


WorkerThread{
 thread: Thread;
 lock: ThreadLock;
 condition: ThreadCondition;
 runnings: List;
 pendings: List;
}

.Initialize(){
 .thread.Initialize((ThreadEntry)WorkerThread_Entry);
 .lock.Initialize();
 .condition.Initialize();
 .runnings.Initialize();
 .pendings.Initialize();
}

.Finalize(){
 .condition.Finalize();
 .lock.Finalize();
}

.Run()->Bool{
 return .thread.Run();
}

.Post(task: Task){
 .lock.Lock();
 .pendings.Push((DoubleNode)task);
 .lock.Unlock();

 .condition.Signal();
}

//Do not post Empty task list
.PostTasks(runnings: List){
 .lock.Lock();
 runnings.MoveTo(.pendings);
 .lock.Unlock();

 .condition.Signal();
}

has Tasks(runnings: List)->Bool{
 return runnings.NotEmpty();
}

NoTasks(runnings: List)->Bool{
 return runnings.Empty();
}

MoveTasks(pendings: List, runnings: List){
 pendings.MoveTo(pTasks);
}

.WaitTasks(){
  runnings: .runnings;
  pendings: .pendings;

  $Lock .lock;

  if .pendings has Tasks,
   MoveTasks(.pendings, .runnings);
  else if .runnings no Tasks, {
   .condition.Wait(.lock);
   MoveTasks(.pendings, .runnings);
  }

  $Unlock .lock;
}

.RunTasks(){
 entry: DoubleNode(.runnings);
 node: DoubleNode = entry.next;
 task: Task;
 while(node != entry){
  task = (Task)node;
  if(task.Entry(task)){
   .runnings.Remove(pNode);
   node = node.next;
   task.Finalize(task);
  }
  else
   node = node.next;
 }
}

.Entry()->void *{
 while(true){
  .WaitTasks();
  .RunTasks();
 }
 return null;
}
