version: 0
//License: Public Domain
//Author: elf
//EMail: elf198012@gmail.com

IDoubleNode{
 Next: get IDoubleNode
 Prev: get IDoubleNode
 LinkNext: function(node: IDoubleNode)
 LinkPrev: function(node: IDoubleNode)
 Link: function(prev: IDoubleNode, next: IDoubleNode)
 Unlink: function
 Reset: function
 Alone: is
 Alone: is not
 MoveBuddiesTo: function(target: IDoubleNode)
 MoveBuddiesToFront: function(target: IDoubleNode)
 SwapBuddies: function(target: IDoubleNode)
}

DoubleNode: IDoubleNode{
 Next = get IDoubleNode{
   return .next;
 }
 
 Prev = get IDoubleNode{
   return .prev;
 }

 LinkNext = function(node: IDoubleNode){
  .next = node
  node.prev = this
 }
 
 LinkPrev = function(node: IDoubleNode){
  .prev = node
  node.next = this
 }

 Link = function(prev: IDoubleNode, next: IDoubleNode){
  .LinkPrev(prev)
  .LinkNext(next)
 }

 Unlink = function{
  .prev.next = .next
  .next.prev = .prev
 }

 Reset = function{
  .prev = .next = this
 }

 Alone = is{
  return .next == this
 }

 Alone = is not{
  return .next != this
 }

 MoveBuddiesTo = function(target: IDoubleNode){
  .next.LinkPrev(target.prev)
  .prev.LinkNext(target)
  .Reset(this)
 }

 MoveBuddiesToFront = function(target: IDoubleNode){
  .next.LinkPrev(target)
  .prev.LinkNext(target.next)
  .Reset(this)
 }

 SwapBuddies = function(target: IDoubleNode){
  tmp: DoubleNode
  tmp.Reset()
  .MoveBuddiesTo(tmp)
  target.MoveBuddiesTo(this)
  tmp.MoveBuddiesTo(target)
 }
private:
 next: IDoubleNode
 prev: IDoubleNode 
}
